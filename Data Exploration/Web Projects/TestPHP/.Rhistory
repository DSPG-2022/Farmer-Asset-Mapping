Combined <- merge(CropData,CropRotation, by.x = "Types of Crops", by.y = "Crop", all.x=TRUE )
View(Combined)
write.csv(Combined,"testRotation.csv")
View(CropRotation)
library(ggplot2)
library(FedData)
library(readxl)
library(dplyr)
library(tidyr)
library(sqldf)
library(raster)
s <- raster(ncol=2, nrow=2)
ymin(s) <- 42.078433865038505
ymax(s) <- 42.10709506728437
xmin(s) <- -93.85498251613917
xmax(s) <- -93.83524145838685
#Gather Data from Web Soil Survey
Area<- get_ssurgo(template = s,label = "CropSelection_V3")
Data <- Area$tabular
componet <- Data$component
muaggart <-Data$muaggatt
mapunit <-Data$mapunit
comonth <- Data$comonth %>% filter(month=="May")
coerosionacc <- Data$coerosionacc %>% filter(rvindicator=="Yes")
Overall<- merge(muaggart,componet,by = "mukey", all = TRUE)
Overall<- merge(Overall,mapunit,by = "mukey", all = TRUE)
Overall<- merge(Overall,comonth,by = "cokey", all = TRUE)
Overall<- merge(Overall,coerosionacc,by = "cokey", all = TRUE)
chorizon <- Data$chorizon
chtexturegrp <-Data$chtexturegrp %>%filter(rvindicator == "Yes")
chorizon2 <- merge(chorizon,chtexturegrp, by = "chkey", all.x=TRUE)
chorizon2 <-chorizon2%>%
mutate(depth = hzdept.r /2.54)
#CropData
CropData <- read_excel("Crop-Info_Farmer Asset Mapping.xlsx")
MergedData <- sqldf("select * from chorizon2 left join CropData
on (chorizon2.depth <= CropData.Depth_l)")
MergedDataNoNA <- MergedData %>%
filter(!is.na(`Types of Crops`))
chorzonSim <-MergedDataNoNA%>%
mutate(depthLevel = "0-MaxRootDepth")
chorzonSim2<- chorzonSim%>%
filter(depthLevel=="0-MaxRootDepth")%>%
group_by(cokey,`Types of Crops`)%>%
mutate(soilText= ifelse(depth==0,texdesc,""))%>%
summarise(ksat = mean(ksat.r,na.rm=TRUE),awc = mean(awc.r, na.rm=TRUE),caco3 = mean(caco3.r,na.rm=TRUE),gypsum= mean(gypsum.r,na.rm=TRUE),sar =mean(sar.r,na.rm=TRUE),ec = mean(ec.r,na.rm=TRUE),cec7= mean(cec7.r,na.rm=TRUE), ph = mean(ph1to1h2o.r,na.rm=TRUE),ph_l = mean(ph1to1h2o.l,na.rm=TRUE),ph_h= mean(ph1to1h2o.h,na.rm=TRUE),om= mean(om.r,na.rm=TRUE),
ptotal = mean(ptotal.r,na.rm=TRUE),soilTextsum = soilText,Kfact = mean(kffact,na.rm=TRUE))%>%
filter(soilTextsum!="")
chData <- merge(chorzonSim2,CropData,by = "Types of Crops")
Overall <- Overall %>%
filter(majcompflag=="Yes")
Overall2<- merge(Overall,chData,by = "cokey", all = TRUE)
Overall2 <- Overall2 %>%
filter(majcompflag=="Yes")
Simple <- as_tibble(Overall2) %>%
dplyr::select(musym.x,mukey,cokey,muname = muname.x,taxorder,compname,slope.r,slopegradwta, slope.l,slope.h,localphase,erokind,erocl,tfact,Kfact,wei,
niccdcd,hydgrp,soilslippot,drainagecl,drclassdcd,niccdcd,awc,aws025wta,aws0150wta, flodfreqcl,floddurcl,pondfreqcl,
ponddurcl,flodfreqdcd,flodfreqmax,pondfreqprs,iacornsr,ph,ph_l,ph_h,cec7,gypsum,ksat,ec,sar,caco3,om,ptotal,
soilTextdes =soilTextsum,`Types of Crops`,`Soil Types`,`Rooting Depth`,`pH-Level`,`Temperature Tolerances`,ph_L,ph_H,Boron,Copper,Zinc,Molybdenum,Iron,Manganese,)
CropRotation <- read_excel("Sanika-Crop_Rotation.xlsx")
Simple <- merge(Simple,CropRotation, by.x = "Types of Crops", by.y = "Crop", all.x=TRUE )
Data <- Area$tabular
componet <- Data$component
muaggart <-Data$muaggatt
mapunit <-Data$mapunit
comonth <- Data$comonth %>% filter(month=="May")
coerosionacc <- Data$coerosionacc %>% filter(rvindicator=="Yes")
Overall<- merge(muaggart,componet,by = "mukey", all = TRUE)
Overall<- merge(Overall,mapunit,by = "mukey", all = TRUE)
Overall<- merge(Overall,comonth,by = "cokey", all = TRUE)
Overall<- merge(Overall,coerosionacc,by = "cokey", all = TRUE)
chorizon <- Data$chorizon
chtexturegrp <-Data$chtexturegrp %>%filter(rvindicator == "Yes")
chorizon2 <- merge(chorizon,chtexturegrp, by = "chkey", all.x=TRUE)
chorizon2 <-chorizon2%>%
mutate(depth = hzdept.r /2.54)
#CropData
CropData <- read_excel("Crop-Info_Farmer Asset Mapping.xlsx")
MergedData <- sqldf("select * from chorizon2 left join CropData
on (chorizon2.depth <= CropData.Depth_l)")
MergedDataNoNA <- MergedData %>%
filter(!is.na(`Types of Crops`))
chorzonSim <-MergedDataNoNA%>%
mutate(depthLevel = "0-MaxRootDepth")
chorzonSim2<- chorzonSim%>%
filter(depthLevel=="0-MaxRootDepth")%>%
group_by(cokey,`Types of Crops`)%>%
mutate(soilText= ifelse(depth==0,texdesc,""))%>%
summarise(ksat = mean(ksat.r,na.rm=TRUE),awc = mean(awc.r, na.rm=TRUE),caco3 = mean(caco3.r,na.rm=TRUE),gypsum= mean(gypsum.r,na.rm=TRUE),sar =mean(sar.r,na.rm=TRUE),ec = mean(ec.r,na.rm=TRUE),cec7= mean(cec7.r,na.rm=TRUE), ph = mean(ph1to1h2o.r,na.rm=TRUE),ph_l = mean(ph1to1h2o.l,na.rm=TRUE),ph_h= mean(ph1to1h2o.h,na.rm=TRUE),om= mean(om.r,na.rm=TRUE),
ptotal = mean(ptotal.r,na.rm=TRUE),soilTextsum = soilText,Kfact = mean(kffact,na.rm=TRUE))%>%
filter(soilTextsum!="")
chData <- merge(chorzonSim2,CropData,by = "Types of Crops")
Overall <- Overall %>%
filter(majcompflag=="Yes")
Overall2<- merge(Overall,chData,by = "cokey", all = TRUE)
Overall2 <- Overall2 %>%
filter(majcompflag=="Yes")
Simple <- as_tibble(Overall2) %>%
dplyr::select(musym.x,mukey,cokey,muname = muname.x,taxorder,compname,slope.r,slopegradwta, slope.l,slope.h,localphase,erokind,erocl,tfact,Kfact,wei,
niccdcd,hydgrp,soilslippot,drainagecl,drclassdcd,niccdcd,awc,aws025wta,aws0150wta, flodfreqcl,floddurcl,pondfreqcl,
ponddurcl,flodfreqdcd,flodfreqmax,pondfreqprs,iacornsr,ph,ph_l,ph_h,cec7,gypsum,ksat,ec,sar,caco3,om,ptotal,
soilTextdes =soilTextsum,`Types of Crops`,`Soil Types`,`Rooting Depth`,`pH-Level`,`Temperature Tolerances`,ph_L,ph_H,Boron,Copper,Zinc,Molybdenum,Iron,Manganese,)
CropRotation <- read_excel("Sanika-Crop_Rotation.xlsx")
Simple <- merge(Simple,CropRotation, by.x = "Types of Crops", by.y = "Crop", all.x=TRUE )
Simple<- Simple%>%
mutate(Flags =
ifelse(ph <= ph_H & ph>=ph_L,0,1),FlagDesc = ifelse(ph <= ph_H & ph>=ph_L,"",",pH does not fit into range"))%>%
mutate(Flags =
ifelse(soilTextdes != `Soil Types`,Flags+1,Flags),FlagDesc = ifelse(soilTextdes!=`Soil Types`,paste(FlagDesc,"Soil Texture does not match",sep=','),FlagDesc))%>%
mutate(Flags =
ifelse(tfact <4,Flags+1,Flags),FlagDesc =ifelse(tfact <4,paste(FlagDesc,"Soil Erosion Tolerance may be an issue",sep=','),FlagDesc) )%>%
mutate(Flags  =
ifelse(Kfact> .38,Flags+1,Flags),FlagDesc =ifelse(Kfact> .38,paste(FlagDesc,"This soil is more susceptible to erosion",sep=','),FlagDesc))%>%
mutate(Flags  =
ifelse(om<2 | om>8,Flags+1,Flags),FlagDesc =ifelse(om< 2|om>8,paste(FlagDesc,"This soil's organic matter percent could be an issue",sep=','),FlagDesc))%>%
mutate(Flags  =
ifelse(erocl == "Class 2",Flags+1,Flags),FlagDesc =ifelse(erocl == "Class 2",paste(FlagDesc,"This soil's topsoil may have been depleated",sep=','),FlagDesc))%>%
mutate(Flags  =
ifelse(aws0150wta <=9.00,Flags+1,Flags),FlagDesc =ifelse(aws0150wta<=9.00,paste(FlagDesc,"This soil's water holding may be limited",sep=','),FlagDesc))%>%
mutate(Flags  =
ifelse(drclassdcd =="Very poorly drained" | drclassdcd == "Poorly drained",Flags+1,Flags),FlagDesc =ifelse(drclassdcd =="Very poorly drained" | drclassdcd == "Poorly drained",paste(FlagDesc,"This soil's drainage may be limited",sep=','),FlagDesc))%>%
mutate(FlagDesc =  ifelse(substr(FlagDesc,1,1)==',',substr(FlagDesc,2,nchar(FlagDesc)),FlagDesc))
View(Simple)
write.csv(Simple,"CropSelection2.csv")
Data <- data.frame()
Data[,1]<_ c(1:100)
Data[,1]<- c(1:100)
Data <- data.frame(c(1:100))
View(Data)
Data <- data.frame(c(1:100))
RollingAverage <- function(df){
df2<- data.frame();
for (value in df[,1]){
s <-nrow(df[value,])
}
}
RollingAverage(Data)
View(s)
Data <- data.frame(c(1:100))
RollingAverage <- function(df){
df2<- data.frame();
for (value in df[,1]){
s <-nrow(df[value,])
}
}
RollingAverage(Data)
RollingAverage <- function(df){
df2<- data.frame();
for (value in df){
s <-nrow(df[value,])
}
}
RollingAverage(Data)
View(Data)
nrow(Data[3,])
nrow(Data[3:5,])
value=3
which(Data$c.1.100.==value)
df <-data.frame()
airquality <- airquality %>%
group_by(Month) %>%
mutate(rec = 1) %>%
mutate(rollavg = cumsum(Wind)/cumsum(rec))
require(dplyr)
airquality <- airquality %>%
group_by(Month) %>%
mutate(rec = 1) %>%
mutate(rollavg = cumsum(Wind)/cumsum(rec))
View(airquality)
s <- raster(ncol=2, nrow=2)
ymin(s) <- 42.078433865038505
ymax(s) <- 42.10709506728437
xmin(s) <- -93.85498251613917
xmax(s) <- -93.83524145838685
min(s)
cellStats(s)
cellStats(s,minValue())
View(s)
s@extent@xmin
s <- raster(ncol=2, nrow=2)
ymin(s) <- 42.078433865038505
ymax(s) <- 42.10709506728437
xmin(s) <- -93.85498251613917
xmax(s) <- -93.83524145838685
riskLink <-read.csv("hzrdLinks.csv")
View(riskLink)
riskLink <-read.csv("hzrdLinks.csv",col.names = FALSE)
riskLink <-read.csv("hzrdLinks.csv",header FALSE)
riskLink <-read.csv("hzrdLinks.csv",header =FALSE)
View(riskLink)
riskLink
value = paste("&extent=",s@extent@xmin)
value= paste(value,s@extent@ymin,sep=',')
value= paste(value,s@extent@xmax,sep=',')
value= paste(value,s@extent@ymax,sep=',')
riskLink[1,4]<-value
riskLink
#Gather Data from Web Soil Survey
Area<- get_ssurgo(template = s,label = "CropSelection_V3")
library(FedData)
#Gather Data from Web Soil Survey
Area<- get_ssurgo(template = s,label = "CropSelection_V3")
Data <- Area$tabular
Data$legend$areasymbol
StateAbv <-substr(Data$legend$areasymbol,0,2)
Data$legend
Statefips<- as.numeric(sum(19000,substr(Data$legend$areasymbol,3)))
Statefips<- as.numeric(sum(19000,substr(Data$legend$areasymbol,3,5)))
Statefips<- as.numeric(sum(19000,as.numeric(substr(Data$legend$areasymbol,3,5))))
## Haxard Risk Fema Report 5
riskLink
##FLOOD FEMA Home 2
value =paste("?AddressQuery=",s@extent@xmin)
value= paste(value,s@extent@ymin,sep=',')
riskLink[2,4]<-value
value =paste("?=",StateAbv)
riskLink[3,4]<-value
## Hazard Risk FEMA 4
value = "nri"
riskLink[4,4]<-value
## Haxard Risk Fema Report 5
value =paste("?dataLOD-Counties&dataIDS=C",Statefips)
riskLink[5,4]<-value
##CLimate mapper Climate Toolbax 6
##excahnge for center values
value =paste("?mapZoom=10&mapCenterLat=",s@extent@ymin)
value= paste(value,"&mapCenterLong=",sep='')
value= paste(value,s@extent@xmin,sep='')
riskLink[6,4]<-value
value = paste("&extent=",s@extent@xmin)
riskLink
riskLink <-read.csv("hzrdLinks.csv",header =FALSE)
value = paste("&extent=",s@extent@xmin)
value= paste(value,s@extent@ymin,sep=',')
value= paste(value,s@extent@xmax,sep=',')
value= paste(value,s@extent@ymax,sep=',')
riskLink[1,4]<-value
##FLOOD FEMA Home 2
value =paste("?AddressQuery=",s@extent@xmin)
value= paste(value,s@extent@ymin,sep=',')
riskLink[2,4]<-value
value =paste("?=",StateAbv)
riskLink[3,4]<-value
## Hazard Risk FEMA 4
value = "nri"
riskLink[4,4]<-value
## Haxard Risk Fema Report 5
value =paste("?dataLOD-Counties&dataIDS=C",Statefips, sep="")
riskLink[5,4]<-value
##CLimate mapper Climate Toolbax 6
##excahnge for center values
value =paste("?mapZoom=10&mapCenterLat=",s@extent@ymin)
value= paste(value,"&mapCenterLong=",sep='')
value= paste(value,s@extent@xmin,sep='')
riskLink[6,4]<-value
riskLink
riskLink <-read.csv("hzrdLinks.csv",header =FALSE)
riskLink
value = paste("&extent=",s@extent@xmin,sep="")
value= paste(value,s@extent@ymin,sep=',')
value= paste(value,s@extent@xmax,sep=',')
value= paste(value,s@extent@ymax,sep=',')
riskLink[1,4]<-value
##FLOOD FEMA Home 2
value =paste("?AddressQuery=",s@extent@xmin,sep="")
value= paste(value,s@extent@ymin,sep=',')
riskLink[2,4]<-value
value =paste("?=",StateAbv,sep="")
riskLink[3,4]<-value
## Hazard Risk FEMA 4
value = "nri"
riskLink[4,4]<-value
## Haxard Risk Fema Report 5
value =paste("?dataLOD-Counties&dataIDS=C",Statefips, sep="")
riskLink[5,4]<-value
##CLimate mapper Climate Toolbax 6
##excahnge for center values
value =paste("?mapZoom=10&mapCenterLat=",s@extent@ymin)
value= paste(value,"&mapCenterLong=",sep='')
value= paste(value,s@extent@xmin,sep='')
riskLink[6,4]<-value
riskLink
riskLink <-read.csv("hzrdLinks.csv",header =FALSE)
riskLink
value = paste("&extent=",s@extent@xmin,sep="")
value= paste(value,s@extent@ymin,sep=',')
value= paste(value,s@extent@xmax,sep=',')
value= paste(value,s@extent@ymax,sep=',')
riskLink[1,4]<-value
##FLOOD FEMA Home 2
value =paste("?AddressQuery=",s@extent@xmin,sep="")
value= paste(value,s@extent@ymin,sep=',')
riskLink[2,4]<-value
value =paste("?",StateAbv,sep="")
riskLink[3,4]<-value
## Hazard Risk FEMA 4
value = "nri"
riskLink[4,4]<-value
## Haxard Risk Fema Report 5
value =paste("?dataLOD-Counties&dataIDS=C",Statefips, sep="")
riskLink[5,4]<-value
##CLimate mapper Climate Toolbax 6
##excahnge for center values
value =paste("?mapZoom=10&mapCenterLat=",s@extent@ymin,sep="")
value= paste(value,"&mapCenterLong=",sep='')
value= paste(value,s@extent@xmin,sep='')
riskLink[6,4]<-value
riskLink
riskLink
value = paste("&extent=",s@extent@xmin,sep="")
value= paste(value,s@extent@ymin,sep=',')
value= paste(value,s@extent@xmax,sep=',')
value= paste(value,s@extent@ymax,sep=',')
riskLink[1,4]<-value
##FLOOD FEMA Home 2
value =paste("?AddressQuery=",s@extent@xmin,sep="")
value= paste(value,s@extent@ymin,sep=',')
riskLink[2,4]<-value
value =paste("?",StateAbv,sep="")
riskLink[3,4]<-value
## Hazard Risk FEMA 4
value = "nri"
riskLink[4,4]<-value
## Haxard Risk Fema Report 5
value =paste("?dataLOD=Counties&dataIDS=C",Statefips, sep="")
riskLink[5,4]<-value
##CLimate mapper Climate Toolbax 6
##excahnge for center values
value =paste("?mapZoom=10&mapCenterLat=",s@extent@ymin,sep="")
value= paste(value,"&mapCenterLong=",sep='')
value= paste(value,s@extent@xmin,sep='')
riskLink[6,4]<-value
riskLink
write.csv(riskLink,"hzrdLinks.csv",row.names = FALSE)
riskLink <-read.csv("hzrdLinks.csv",header =FALSE)
riskLink
##FLOOD FEMA MAP 1
value = paste("&extent=",s@extent@xmin,sep="")
value= paste(value,s@extent@ymin,sep=',')
value= paste(value,s@extent@xmax,sep=',')
value= paste(value,s@extent@ymax,sep=',')
riskLink[1,4]<-value
##FLOOD FEMA Home 2
value =paste("?AddressQuery=",s@extent@xmin,sep="")
value= paste(value,s@extent@ymin,sep=',')
riskLink[2,4]<-value
##Drought Drought Monitor 3
value =paste("?",StateAbv,sep="")
riskLink[3,4]<-value
## Hazard Risk FEMA 4
value = "nri"
riskLink[4,4]<-value
## Haxard Risk Fema Report 5
value =paste("?dataLOD=Counties&dataIDS=C",Statefips, sep="")
riskLink[5,4]<-value
##CLimate mapper Climate Toolbax 6
##excahnge for center values
value =paste("?mapZoom=10&mapCenterLat=",s@extent@ymin,sep="")
value= paste(value,"&mapCenterLon=",sep='')
value= paste(value,s@extent@xmin,sep='')
riskLink[6,4]<-value
riskLink
write.csv(riskLink,"hzrdLinks.csv",row.names = FALSE)
riskLink <-read.csv("hzrdLinks.csv",header =FALSE)
View(riskLink)
riskLink <-read.csv("hzrdLinks.csv",header =TRUE)
View(riskLink)
riskLink <-read.csv("hzrdLinks.csv",header =TRUE)[2,7]
riskLink <-read.csv("hzrdLinks.csv",header =TRUE)[2,7]
riskLink <-read.csv("hzrdLinks.csv",header =TRUE)[2:7,]
View(riskLink)
riskLink
value = paste("&extent=",s@extent@xmin,sep="")
value= paste(value,s@extent@ymin,sep=',')
value= paste(value,s@extent@xmax,sep=',')
value= paste(value,s@extent@ymax,sep=',')
riskLink[1,4]<-value
##FLOOD FEMA Home 2
value =paste("?AddressQuery=",s@extent@xmin,sep="")
value= paste(value,s@extent@ymin,sep=',')
riskLink[2,4]<-value
value =paste("?",StateAbv,sep="")
riskLink[3,4]<-value
## Hazard Risk FEMA 4
value = "nri"
riskLink[4,4]<-value
## Haxard Risk Fema Report 5
value =paste("?dataLOD=Counties&dataIDS=C",Statefips, sep="")
riskLink[5,4]<-value
##CLimate mapper Climate Toolbax 6
##excahnge for center values
value =paste("?mapZoom=10&mapCenterLat=",s@extent@ymin,sep="")
value= paste(value,"&mapCenterLon=",sep='')
value= paste(value,s@extent@xmin,sep='')
riskLink[6,4]<-value
riskLink
write.csv(riskLink,"hzrdLinks.csv",row.names = FALSE)
View(riskLink)
riskLink <-read.csv("hzrdLinks.csv",header =TRUE)
View(riskLink)
library(ggplot2)
library(FedData)
library(readxl)
library(dplyr)
library(tidyr)
library(sqldf)
library(raster)
setwd("C:\\Users\\cornd\\OneDrive\\Documents\\GitHub\\Farmer-Asset-Mapping\\Data Exploration\\TestPHP")
#CropData
CropData <- read_excel("Input\\Crop-Info_Farmer Asset Mapping.xlsx")
#CropData
CropData <- read_excel("Input\\Crop-Info_Farmer Asset Mapping.xlsx")
View(CropData)
#CropData
CropData <- read_excel("Input\\Crop-Info_Farmer Asset Mapping.xlsx")
View(CropData)
##Raw Weather Data
mydata <- read.csv("Output\\WeatherData.csv")
##Crop Info
newdata <- read_excel("Input\\Crop-Info_Farmer Asset Mapping.xlsx")
##Removes unwanted Data from Weather Data
mydata = subset(mydata, select = -c(`data.mrms_precip_in`,`data.prism_precip_in`,`data.12z_high_f`,`data.climate_daily_high_f`,`data.12z_low_f`,`data.climate_daily_low_f`,`data.daily_precip_in`,`data.12z_precip_in`,`data.climate_daily_precip_in` ) )
##Creates new Data, based on Crop's base growing temp and average_temp for day
####CHANGE would like to add these values to Crop dataset to make it easier to add new crops
mydata<- mydata%>%
group_by((data.date))%>%
mutate(Average_temp = (data.daily_high_f + data.daily_low_f)/2)%>%
mutate(OnionGDD = Average_temp - 40)%>%
mutate(PeasGDD =Average_temp - 39)%>%
mutate(AsparagusGDD= Average_temp - 50,PotatoGDD =Average_temp - 32 , CabbageGDD =Average_temp - 40, `Sweet PotatoGDD` =Average_temp - 65
,SquashGDD = Average_temp - 60,CucumberGDD = Average_temp - 60,CauliflowerGDD =Average_temp - 40
,PumpkinGDD = Average_temp - 60,TomatoGDD = Average_temp - 50, WatermelonGDD = Average_temp - 50, CarrotGDD =Average_temp - 40,`Sweet CornGDD` = Average_temp - 50,
LettuceGDD = Average_temp - 40
,EggplantGDD = Average_temp - 50
,RadishGDD = Average_temp - 40,OatsGDD = Average_temp - 40,
SpinachGDD = Average_temp - 35,
CantaloupeGDD = Average_temp - 65)
##ReLU
##GDD cannot be negative, so anyvalue below 0 is assigned to 0
mydata$OatsGDD= ifelse(mydata$OatsGDD < 0, 0, mydata$OatsGDD)
mydata$OnionGDD= ifelse(mydata$OnionGDD < 0, 0, mydata$OnionGDD)
mydata$PeasGDD= ifelse(mydata$PeasGDD < 0, 0,mydata$PeasGDD )
mydata$AsparagusGDD= ifelse(mydata$AsparagusGDD < 0, 0, mydata$AsparagusGDD )
mydata$PotatoGDD= ifelse(mydata$PotatoGDD < 0, 0, mydata$PotatoGDD )
mydata$CabbageGDD= ifelse(mydata$CabbageGDD < 0, 0,mydata$CabbageGDD )
mydata$`Sweet PotatoGDD`= ifelse(mydata$`Sweet PotatoGDD` < 0, 0,mydata$`Sweet PotatoGDD` )
mydata$SquashGDD= ifelse(mydata$SquashGDD < 0, 0,mydata$SquashGDD )
mydata$CucumberGDD= ifelse( mydata$CucumberGDD< 0, 0,mydata$CucumberGDD )
mydata$CauliflowerGDD= ifelse(mydata$CauliflowerGDD < 0, 0, mydata$CauliflowerGDD)
mydata$PumpkinGDD= ifelse(mydata$PumpkinGDD < 0, 0,mydata$PumpkinGDD )
mydata$TomatoGDD= ifelse( mydata$TomatoGDD< 0,0,mydata$TomatoGDD )
mydata$WatermelonGDD= ifelse(mydata$WatermelonGDD < 0,0,mydata$WatermelonGDD )
mydata$CarrotGDD= ifelse( mydata$CarrotGDD< 0,0,mydata$CarrotGDD )
mydata$`Sweet CornGDD`= ifelse(mydata$`Sweet CornGDD` < 0, 0,mydata$`Sweet CornGDD`)
mydata$LettuceGDD= ifelse(mydata$LettuceGDD < 0,0,mydata$LettuceGDD )
mydata$EggplantGDD= ifelse(mydata$EggplantGDD < 0,0,mydata$EggplantGDD )
mydata$RadishGDD= ifelse(mydata$RadishGDD < 0,0,mydata$RadishGDD )
mydata$SpinachGDD= ifelse(mydata$SpinachGDD < 0, 0,mydata$SpinachGDD )
mydata$CantaloupeGDD= ifelse(mydata$CantaloupeGDD < 0, 0,mydata$CantaloupeGDD )
data2<- mydata %>%
group_by(data.date)%>%
mutate(year = substr(data.date,0,4),Month=month.name[as.numeric(substr(data.date,6,7))])%>%
ungroup%>%
##Reformat to nice order and remove unneeded Columns
select(year,Month,everything())%>%
select(-X,-data.date)%>%
select(-3,-4,-5,-6)%>%
##Convert to long format
pivot_longer(3:ncol(data2))
data2<- mydata %>%
group_by(data.date)%>%
mutate(year = substr(data.date,0,4),Month=month.name[as.numeric(substr(data.date,6,7))])%>%
ungroup%>%
##Reformat to nice order and remove unneeded Columns
select(year,Month,everything())%>%
select(-X,-data.date)%>%
select(-3,-4,-5,-6)%>%
##Convert to long format
pivot_longer(3:ncol(mydata))
data2<- mydata %>%
group_by(data.date)%>%
mutate(year = substr(data.date,0,4),Month=month.name[as.numeric(substr(data.date,6,7))])%>%
ungroup%>%
##Reformat to nice order and remove unneeded Columns
select(year,Month,everything())%>%
select(-X,-data.date)%>%
select(-3,-4,-5,-6)%>%
##Convert to long format
pivot_longer(3:ncol(mydata-4))
data2<- mydata %>%
group_by(data.date)%>%
mutate(year = substr(data.date,0,4),Month=month.name[as.numeric(substr(data.date,6,7))])%>%
ungroup%>%
##Reformat to nice order and remove unneeded Columns
select(year,Month,everything())%>%
select(-X,-data.date)%>%
select(-3,-4,-5,-6)%>%
##Convert to long format
pivot_longer(3:ncol(mydata)-4)
data2<- mydata %>%
group_by(data.date)%>%
mutate(year = substr(data.date,0,4),Month=month.name[as.numeric(substr(data.date,6,7))])%>%
ungroup%>%
##Reformat to nice order and remove unneeded Columns
select(year,Month,everything())%>%
select(-X,-data.date)%>%
select(-3,-4,-5,-6)
data2<- data2%>%
pivot_longer(3:ncol(data2))
data3<-data2%>%
group_by(year,Month,name)%>%
summarise(value= sum(value))
